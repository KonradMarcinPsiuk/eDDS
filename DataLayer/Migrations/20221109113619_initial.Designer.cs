// <auto-generated />
using System;
using DataLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(NewbridgeContext))]
    [Migration("20221109113619_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataLayer.Models.CilTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LineAreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineAreaId");

                    b.ToTable("CilTasks");
                });

            modelBuilder.Entity("DataLayer.Models.ClTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LineAreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineAreaId");

                    b.ToTable("ClTasks");
                });

            modelBuilder.Entity("DataLayer.Models.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AmInPlace")
                        .HasColumnType("bit");

                    b.Property<bool>("AmRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("ClInPlace")
                        .HasColumnType("bit");

                    b.Property<bool>("ClRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PmInPlace")
                        .HasColumnType("bit");

                    b.Property<bool>("PmRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("SapNumber")
                        .HasColumnType("int");

                    b.Property<bool>("SpareAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("SpareRequired")
                        .HasColumnType("bit");

                    b.Property<int>("TransformationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("WearComponent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TransformationId" }, "IX_Components_TransformationId");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("DataLayer.Models.ComponentAction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LineAreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ComponentId" }, "IX_ComponentActions_ComponentId");

                    b.HasIndex(new[] { "LineAreaId" }, "IX_ComponentActions_LineAreaId");

                    b.HasIndex(new[] { "OwnerId" }, "IX_ComponentActions_OwnerId");

                    b.ToTable("ComponentActions");
                });

            modelBuilder.Entity("DataLayer.Models.DailyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyPlanTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductionLineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductionLineId" }, "IX_DailyPlans_ProductionLineId");

                    b.ToTable("DailyPlans");
                });

            modelBuilder.Entity("DataLayer.Models.DailyPlanCilTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyPlanId")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LinkedTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimingComment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DailyPlanId");

                    b.HasIndex("LinkedTaskId");

                    b.HasIndex("OwnerId");

                    b.ToTable("DailyPlanCilTasks");
                });

            modelBuilder.Entity("DataLayer.Models.DailyPlanClTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyPlanId")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LinkedTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimingComment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DailyPlanId");

                    b.HasIndex("LinkedTaskId");

                    b.HasIndex("OwnerId");

                    b.ToTable("DailyPlanClTasks");
                });

            modelBuilder.Entity("DataLayer.Models.DailyPlanDefectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyPlanId")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LinkedTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimingComment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DailyPlanId" }, "IX_DailyPlanDefectTasks_DailyPlanId");

                    b.HasIndex(new[] { "LinkedTaskId" }, "IX_DailyPlanDefectTasks_LinkedTaskId");

                    b.HasIndex(new[] { "OwnerId" }, "IX_DailyPlanDefectTasks_OwnerId");

                    b.ToTable("DailyPlanDefectTasks");
                });

            modelBuilder.Entity("DataLayer.Models.DailyPlanOtherTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyPlanId")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LinkedTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimingComment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DailyPlanId");

                    b.HasIndex("LinkedTaskId");

                    b.HasIndex("OwnerId");

                    b.ToTable("DailyPlanOtherTasks");
                });

            modelBuilder.Entity("DataLayer.Models.DailyPlanPmTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyPlanId")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LinkedTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimingComment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DailyPlanId");

                    b.HasIndex("LinkedTaskId");

                    b.HasIndex("OwnerId");

                    b.ToTable("DailyPlanPmTasks");
                });

            modelBuilder.Entity("DataLayer.Models.DailyResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("CoDay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CoEve")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CoNight")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("CoNIght");

                    b.Property<string>("CommentDay")
                        .HasColumnType("text");

                    b.Property<string>("CommentEve")
                        .HasColumnType("text");

                    b.Property<string>("CommentNight")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal?>("OutputDay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("OutputEve")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("OutputNight")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PdtDay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PdtEve")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PdtNight")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PrDay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PrEve")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PrNight")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ProductionLineId")
                        .HasColumnType("int");

                    b.Property<decimal?>("StaffingDay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("StaffingEve")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("StaffingNight")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("StopsDay")
                        .HasColumnType("int");

                    b.Property<int?>("StopsEve")
                        .HasColumnType("int");

                    b.Property<int?>("StopsNight")
                        .HasColumnType("int");

                    b.Property<decimal?>("UpdtDay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("UpdtEve")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("UpdtNight")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("WasteDay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("WasteEve")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("WasteNight")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductionLineId");

                    b.ToTable("DailyResult", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.DailyTriggerAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AnswerIntDay")
                        .HasColumnType("int");

                    b.Property<int?>("AnswerIntEve")
                        .HasColumnType("int");

                    b.Property<int?>("AnswerIntNight")
                        .HasColumnType("int");

                    b.Property<string>("AnswerTextDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerTextEve")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerTextNight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AnswerTriggerDay")
                        .HasColumnType("int");

                    b.Property<int?>("AnswerTriggerEve")
                        .HasColumnType("int");

                    b.Property<int?>("AnswerTriggerNight")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Field")
                        .HasColumnType("int");

                    b.Property<string>("HintText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionLineId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<int?>("TargetInt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionLineId");

                    b.ToTable("DailyTriggerAnswer", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.DailyTriggerQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Field")
                        .HasColumnType("int");

                    b.Property<string>("Hint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetInt")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DailyTriggerQuestion", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Defect", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FoundDuringCil")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LineAreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<bool>("PmHelpNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("PmHelpText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LineAreaId" }, "IX_Defects_LineAreaId");

                    b.HasIndex(new[] { "OwnerId" }, "IX_Defects_OwnerId");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("DataLayer.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValueStreamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ValueStreamId" }, "IX_Departments_ValueStreamId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DataLayer.Models.LineArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductionLineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductionLineId" }, "IX_LineAreas_ProductionLineId");

                    b.ToTable("LineAreas");
                });

            modelBuilder.Entity("DataLayer.Models.Loss", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LineAreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LineAreaId" }, "IX_Losses_LineAreaId");

                    b.HasIndex(new[] { "OwnerId" }, "IX_Losses_OwnerId");

                    b.ToTable("Losses");
                });

            modelBuilder.Entity("DataLayer.Models.OtherTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LineAreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineAreaId");

                    b.ToTable("OtherTasks");
                });

            modelBuilder.Entity("DataLayer.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRealPerson")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("DataLayer.Models.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("DataLayer.Models.PmTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LineAreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineAreaId");

                    b.ToTable("PmTasks");
                });

            modelBuilder.Entity("DataLayer.Models.ProductionLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("FamilyId")
                        .HasColumnType("int");

                    b.Property<int?>("IsProficyBased")
                        .HasColumnType("int");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProficyLine")
                        .HasColumnType("int");

                    b.Property<int?>("ProficyUnit")
                        .HasColumnType("int");

                    b.Property<decimal?>("TargetCo")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("TargetPdt")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("TargetPr")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("TargetUpdt")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("TargetWaste")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_ProductionLines_DepartmentId");

                    b.ToTable("ProductionLines");
                });

            modelBuilder.Entity("DataLayer.Models.ProductionLineDailyTriggerQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DailyTriggerQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionLineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DailyTriggerQuestionId");

                    b.HasIndex("ProductionLineId");

                    b.ToTable("ProductionLine_DailyTriggerQuestion", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.SafetyZoneTrigger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("SafetyZoneTrigger", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.SafetyZoneTriggerAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Answer")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SafetyZoneTriggerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SafetyZoneTriggerId");

                    b.ToTable("SafetyZoneTriggerAnswer", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.SafetyZoneTriggerQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SafetyZoneTriggerQuestion", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.SafetyZoneTriggerQuestionDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("SafetyZoneTriggerQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SafetyZoneTriggerQuestionId");

                    b.ToTable("SafetyZoneTriggerQuestion_Department", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Transformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LineAreaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LineAreaId" }, "IX_Transformations_LineAreaId");

                    b.ToTable("Transformations");
                });

            modelBuilder.Entity("DataLayer.Models.ValueStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("ValueStreamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PlantId" }, "IX_ValueStreams_PlantId");

                    b.ToTable("ValueStreams");
                });

            modelBuilder.Entity("DepartmentPerson", b =>
                {
                    b.Property<int>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentsId", "PeopleId");

                    b.HasIndex(new[] { "PeopleId" }, "IX_DepartmentPerson_PeopleId");

                    b.ToTable("DepartmentPerson", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.CilTask", b =>
                {
                    b.HasOne("DataLayer.Models.LineArea", "LineArea")
                        .WithMany("CilTasks")
                        .HasForeignKey("LineAreaId")
                        .IsRequired()
                        .HasConstraintName("FK_CilTasks_LineAreas");

                    b.Navigation("LineArea");
                });

            modelBuilder.Entity("DataLayer.Models.ClTask", b =>
                {
                    b.HasOne("DataLayer.Models.LineArea", "LineArea")
                        .WithMany("ClTasks")
                        .HasForeignKey("LineAreaId")
                        .IsRequired()
                        .HasConstraintName("FK_ClTasks_LineAreas");

                    b.Navigation("LineArea");
                });

            modelBuilder.Entity("DataLayer.Models.Component", b =>
                {
                    b.HasOne("DataLayer.Models.Transformation", "Transformation")
                        .WithMany("Components")
                        .HasForeignKey("TransformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transformation");
                });

            modelBuilder.Entity("DataLayer.Models.ComponentAction", b =>
                {
                    b.HasOne("DataLayer.Models.Component", "Component")
                        .WithMany("ComponentActions")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.LineArea", "LineArea")
                        .WithMany("ComponentActions")
                        .HasForeignKey("LineAreaId")
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Person", "Owner")
                        .WithMany("ComponentActions")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Component");

                    b.Navigation("LineArea");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataLayer.Models.DailyPlan", b =>
                {
                    b.HasOne("DataLayer.Models.ProductionLine", "ProductionLine")
                        .WithMany("DailyPlans")
                        .HasForeignKey("ProductionLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("DataLayer.Models.DailyPlanCilTask", b =>
                {
                    b.HasOne("DataLayer.Models.DailyPlan", "DailyPlan")
                        .WithMany("DailyPlanCilTasks")
                        .HasForeignKey("DailyPlanId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyPlanCilTasks_DailyPlans");

                    b.HasOne("DataLayer.Models.CilTask", "LinkedTask")
                        .WithMany("DailyPlanCilTasks")
                        .HasForeignKey("LinkedTaskId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyPlanCilTasks_CilTasks");

                    b.HasOne("DataLayer.Models.Person", "Owner")
                        .WithMany("DailyPlanCilTasks")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_DailyPlanCilTasks_People");

                    b.Navigation("DailyPlan");

                    b.Navigation("LinkedTask");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataLayer.Models.DailyPlanClTask", b =>
                {
                    b.HasOne("DataLayer.Models.DailyPlan", "DailyPlan")
                        .WithMany("DailyPlanClTasks")
                        .HasForeignKey("DailyPlanId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyPlanClTasks_DailyPlans");

                    b.HasOne("DataLayer.Models.ClTask", "LinkedTask")
                        .WithMany("DailyPlanClTasks")
                        .HasForeignKey("LinkedTaskId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyPlanClTasks_ClTasks");

                    b.HasOne("DataLayer.Models.Person", "Owner")
                        .WithMany("DailyPlanClTasks")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_DailyPlanClTasks_People");

                    b.Navigation("DailyPlan");

                    b.Navigation("LinkedTask");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataLayer.Models.DailyPlanDefectTask", b =>
                {
                    b.HasOne("DataLayer.Models.DailyPlan", "DailyPlan")
                        .WithMany("DailyPlanDefectTasks")
                        .HasForeignKey("DailyPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Defect", "LinkedTask")
                        .WithMany("DailyPlanDefectTasks")
                        .HasForeignKey("LinkedTaskId")
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Person", "Owner")
                        .WithMany("DailyPlanDefectTasks")
                        .HasForeignKey("OwnerId");

                    b.Navigation("DailyPlan");

                    b.Navigation("LinkedTask");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataLayer.Models.DailyPlanOtherTask", b =>
                {
                    b.HasOne("DataLayer.Models.DailyPlan", "DailyPlan")
                        .WithMany("DailyPlanOtherTasks")
                        .HasForeignKey("DailyPlanId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyPlanOtherTasks_DailyPlans");

                    b.HasOne("DataLayer.Models.OtherTask", "LinkedTask")
                        .WithMany("DailyPlanOtherTasks")
                        .HasForeignKey("LinkedTaskId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyPlanOtherTasks_OtherTasks");

                    b.HasOne("DataLayer.Models.Person", "Owner")
                        .WithMany("DailyPlanOtherTasks")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_DailyPlanOtherTasks_People");

                    b.Navigation("DailyPlan");

                    b.Navigation("LinkedTask");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataLayer.Models.DailyPlanPmTask", b =>
                {
                    b.HasOne("DataLayer.Models.DailyPlan", "DailyPlan")
                        .WithMany("DailyPlanPmTasks")
                        .HasForeignKey("DailyPlanId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyPlanPmTasks_DailyPlans");

                    b.HasOne("DataLayer.Models.PmTask", "LinkedTask")
                        .WithMany("DailyPlanPmTasks")
                        .HasForeignKey("LinkedTaskId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyPlanPmTasks_PmTasks");

                    b.HasOne("DataLayer.Models.Person", "Owner")
                        .WithMany("DailyPlanPmTasks")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_DailyPlanPmTasks_People");

                    b.Navigation("DailyPlan");

                    b.Navigation("LinkedTask");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataLayer.Models.DailyResult", b =>
                {
                    b.HasOne("DataLayer.Models.ProductionLine", "ProductionLine")
                        .WithMany("DailyResults")
                        .HasForeignKey("ProductionLineId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyResult_ProductionLines");

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("DataLayer.Models.DailyTriggerAnswer", b =>
                {
                    b.HasOne("DataLayer.Models.ProductionLine", "ProductionLine")
                        .WithMany("DailyTriggerAnswers")
                        .HasForeignKey("ProductionLineId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyTriggerAnswer_ProductionLines");

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("DataLayer.Models.Defect", b =>
                {
                    b.HasOne("DataLayer.Models.LineArea", "LineArea")
                        .WithMany("Defects")
                        .HasForeignKey("LineAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Person", "Owner")
                        .WithMany("Defects")
                        .HasForeignKey("OwnerId");

                    b.Navigation("LineArea");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataLayer.Models.Department", b =>
                {
                    b.HasOne("DataLayer.Models.ValueStream", "ValueStream")
                        .WithMany("Departments")
                        .HasForeignKey("ValueStreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValueStream");
                });

            modelBuilder.Entity("DataLayer.Models.LineArea", b =>
                {
                    b.HasOne("DataLayer.Models.ProductionLine", "ProductionLine")
                        .WithMany("LineAreas")
                        .HasForeignKey("ProductionLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("DataLayer.Models.Loss", b =>
                {
                    b.HasOne("DataLayer.Models.LineArea", "LineArea")
                        .WithMany("Losses")
                        .HasForeignKey("LineAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Person", "Owner")
                        .WithMany("Losses")
                        .HasForeignKey("OwnerId");

                    b.Navigation("LineArea");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataLayer.Models.OtherTask", b =>
                {
                    b.HasOne("DataLayer.Models.LineArea", "LineArea")
                        .WithMany("OtherTasks")
                        .HasForeignKey("LineAreaId")
                        .IsRequired()
                        .HasConstraintName("FK_OtherTasks_LineAreas");

                    b.Navigation("LineArea");
                });

            modelBuilder.Entity("DataLayer.Models.PmTask", b =>
                {
                    b.HasOne("DataLayer.Models.LineArea", "LineArea")
                        .WithMany("PmTasks")
                        .HasForeignKey("LineAreaId")
                        .IsRequired()
                        .HasConstraintName("FK_PmTasks_LineAreas");

                    b.Navigation("LineArea");
                });

            modelBuilder.Entity("DataLayer.Models.ProductionLine", b =>
                {
                    b.HasOne("DataLayer.Models.Department", "Department")
                        .WithMany("ProductionLines")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DataLayer.Models.ProductionLineDailyTriggerQuestion", b =>
                {
                    b.HasOne("DataLayer.Models.DailyTriggerQuestion", "DailyTriggerQuestion")
                        .WithMany("ProductionLineDailyTriggerQuestions")
                        .HasForeignKey("DailyTriggerQuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductionLine_DailyTriggerQuestion_DailyTriggerQuestion");

                    b.HasOne("DataLayer.Models.ProductionLine", "ProductionLine")
                        .WithMany("ProductionLineDailyTriggerQuestions")
                        .HasForeignKey("ProductionLineId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductionLine_DailyTriggerQuestion_ProductionLines");

                    b.Navigation("DailyTriggerQuestion");

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("DataLayer.Models.SafetyZoneTrigger", b =>
                {
                    b.HasOne("DataLayer.Models.Department", "Department")
                        .WithMany("SafetyZoneTriggers")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("SafetyZoneTrigger_Departments_null_fk");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DataLayer.Models.SafetyZoneTriggerAnswer", b =>
                {
                    b.HasOne("DataLayer.Models.SafetyZoneTrigger", "SafetyZoneTrigger")
                        .WithMany("SafetyZoneTriggerAnswers")
                        .HasForeignKey("SafetyZoneTriggerId")
                        .IsRequired()
                        .HasConstraintName("SafetyZoneTriggerAnswer_SafetyZoneTrigger_null_fk");

                    b.Navigation("SafetyZoneTrigger");
                });

            modelBuilder.Entity("DataLayer.Models.SafetyZoneTriggerQuestionDepartment", b =>
                {
                    b.HasOne("DataLayer.Models.Department", "Department")
                        .WithMany("SafetyZoneTriggerQuestionDepartments")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("SafetyZoneTriggerQuestion_Department_Departments_null_fk");

                    b.HasOne("DataLayer.Models.SafetyZoneTriggerQuestion", "SafetyZoneTriggerQuestion")
                        .WithMany("SafetyZoneTriggerQuestionDepartments")
                        .HasForeignKey("SafetyZoneTriggerQuestionId")
                        .IsRequired()
                        .HasConstraintName("SafetyZoneTriggerQuestion_Department_SafetyZoneTriggerQuestion_null_fk");

                    b.Navigation("Department");

                    b.Navigation("SafetyZoneTriggerQuestion");
                });

            modelBuilder.Entity("DataLayer.Models.Transformation", b =>
                {
                    b.HasOne("DataLayer.Models.LineArea", "LineArea")
                        .WithMany("Transformations")
                        .HasForeignKey("LineAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineArea");
                });

            modelBuilder.Entity("DataLayer.Models.ValueStream", b =>
                {
                    b.HasOne("DataLayer.Models.Plant", "Plant")
                        .WithMany("ValueStreams")
                        .HasForeignKey("PlantId");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("DepartmentPerson", b =>
                {
                    b.HasOne("DataLayer.Models.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Models.CilTask", b =>
                {
                    b.Navigation("DailyPlanCilTasks");
                });

            modelBuilder.Entity("DataLayer.Models.ClTask", b =>
                {
                    b.Navigation("DailyPlanClTasks");
                });

            modelBuilder.Entity("DataLayer.Models.Component", b =>
                {
                    b.Navigation("ComponentActions");
                });

            modelBuilder.Entity("DataLayer.Models.DailyPlan", b =>
                {
                    b.Navigation("DailyPlanCilTasks");

                    b.Navigation("DailyPlanClTasks");

                    b.Navigation("DailyPlanDefectTasks");

                    b.Navigation("DailyPlanOtherTasks");

                    b.Navigation("DailyPlanPmTasks");
                });

            modelBuilder.Entity("DataLayer.Models.DailyTriggerQuestion", b =>
                {
                    b.Navigation("ProductionLineDailyTriggerQuestions");
                });

            modelBuilder.Entity("DataLayer.Models.Defect", b =>
                {
                    b.Navigation("DailyPlanDefectTasks");
                });

            modelBuilder.Entity("DataLayer.Models.Department", b =>
                {
                    b.Navigation("ProductionLines");

                    b.Navigation("SafetyZoneTriggerQuestionDepartments");

                    b.Navigation("SafetyZoneTriggers");
                });

            modelBuilder.Entity("DataLayer.Models.LineArea", b =>
                {
                    b.Navigation("CilTasks");

                    b.Navigation("ClTasks");

                    b.Navigation("ComponentActions");

                    b.Navigation("Defects");

                    b.Navigation("Losses");

                    b.Navigation("OtherTasks");

                    b.Navigation("PmTasks");

                    b.Navigation("Transformations");
                });

            modelBuilder.Entity("DataLayer.Models.OtherTask", b =>
                {
                    b.Navigation("DailyPlanOtherTasks");
                });

            modelBuilder.Entity("DataLayer.Models.Person", b =>
                {
                    b.Navigation("ComponentActions");

                    b.Navigation("DailyPlanCilTasks");

                    b.Navigation("DailyPlanClTasks");

                    b.Navigation("DailyPlanDefectTasks");

                    b.Navigation("DailyPlanOtherTasks");

                    b.Navigation("DailyPlanPmTasks");

                    b.Navigation("Defects");

                    b.Navigation("Losses");
                });

            modelBuilder.Entity("DataLayer.Models.Plant", b =>
                {
                    b.Navigation("ValueStreams");
                });

            modelBuilder.Entity("DataLayer.Models.PmTask", b =>
                {
                    b.Navigation("DailyPlanPmTasks");
                });

            modelBuilder.Entity("DataLayer.Models.ProductionLine", b =>
                {
                    b.Navigation("DailyPlans");

                    b.Navigation("DailyResults");

                    b.Navigation("DailyTriggerAnswers");

                    b.Navigation("LineAreas");

                    b.Navigation("ProductionLineDailyTriggerQuestions");
                });

            modelBuilder.Entity("DataLayer.Models.SafetyZoneTrigger", b =>
                {
                    b.Navigation("SafetyZoneTriggerAnswers");
                });

            modelBuilder.Entity("DataLayer.Models.SafetyZoneTriggerQuestion", b =>
                {
                    b.Navigation("SafetyZoneTriggerQuestionDepartments");
                });

            modelBuilder.Entity("DataLayer.Models.Transformation", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("DataLayer.Models.ValueStream", b =>
                {
                    b.Navigation("Departments");
                });
#pragma warning restore 612, 618
        }
    }
}
